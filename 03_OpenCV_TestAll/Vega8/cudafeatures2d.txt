[----------]
[   INFO   ] 	Implementation variant: cuda.
[----------]
[----------]
[ GPU INFO ] 	Run test suite on GeForce GTX 1050 GPU.
[----------]
Time compensation is 0
*** CUDA Device Query (Runtime API) version (CUDART static linking) *** 

Device count: 1

Device 0: "GeForce GTX 1050"
  CUDA Driver Version / Runtime Version          10.20 / 10.20
  CUDA Capability Major/Minor version number:    6.1
  Total amount of global memory:                 1997 MBytes (2094202880 bytes)
  GPU Clock Speed:                               1.46 GHz
  Max Texture Dimension Size (x,y,z)             1D=(131072), 2D=(131072,65536), 3D=(16384,16384,16384)
  Max Layered Texture Size (dim) x layers        1D=(32768) x 2048, 2D=(32768,32768) x 2048
  Total amount of constant memory:               65536 bytes
  Total amount of shared memory per block:       49152 bytes
  Total number of registers available per block: 65536
  Warp size:                                     32
  Maximum number of threads per block:           1024
  Maximum sizes of each dimension of a block:    1024 x 1024 x 64
  Maximum sizes of each dimension of a grid:     2147483647 x 65535 x 65535
  Maximum memory pitch:                          2147483647 bytes
  Texture alignment:                             512 bytes
  Concurrent copy and execution:                 Yes with 2 copy engine(s)
  Run time limit on kernels:                     Yes
  Integrated GPU sharing Host Memory:            No
  Support host page-locked memory mapping:       Yes
  Concurrent kernel execution:                   Yes
  Alignment requirement for Surfaces:            Yes
  Device has ECC support enabled:                No
  Device is using TCC driver mode:               No
  Device supports Unified Addressing (UVA):      Yes
  Device PCI Bus ID / PCI location ID:           1 / 0
  Compute Mode:
      Default (multiple host threads can use ::cudaSetDevice() with device simultaneously) 

deviceQuery, CUDA Driver = CUDART, CUDA Driver Version  = 10.20, CUDA Runtime Version = 10.20, NumDevs = 1

TEST: Skip tests with tags: 'mem_6gb', 'verylong'
CTEST_FULL_OUTPUT
OpenCV version: 4.3.0-dev
OpenCV VCS version: 4.3.0-201-gc722625f28
Build type: RELEASE
WARNING: build value differs from runtime: Release
Compiler: /usr/bin/c++  (ver 7.5.0)
Parallel framework: pthreads (nthreads=4)
CPU features: SSE SSE2 SSE3 *SSE4.1 *SSE4.2 *FP16 *AVX *AVX2 *AVX512-SKX?
Intel(R) IPP version: ippIP AVX2 (l9) 2020.0.0 Gold (-) Oct 19 2019
OpenCL Platforms: 
    NVIDIA CUDA
        dGPU: GeForce GTX 1050 (OpenCL 1.2 CUDA)
    AMD Accelerated Parallel Processing
        iGPU: gfx902 (OpenCL 2.0 AMD-APP (3004.6))
Current OpenCL device: 
    Type = iGPU
    Name = gfx902
    Version = OpenCL 2.0 AMD-APP (3004.6)
    Driver version = 3004.6 (PAL,HSAIL)
    Address bits = 64
    Compute units = 8
    Max work group size = 256
    Local memory size = 64 KB
    Max memory allocation size = 435 MB 204 KB 819 B
    Double support = Yes
    Host unified memory = Yes
    Device extensions:
        cl_khr_fp64
        cl_amd_fp64
        cl_khr_global_int32_base_atomics
        cl_khr_global_int32_extended_atomics
        cl_khr_local_int32_base_atomics
        cl_khr_local_int32_extended_atomics
        cl_khr_int64_base_atomics
        cl_khr_int64_extended_atomics
        cl_khr_3d_image_writes
        cl_khr_byte_addressable_store
        cl_khr_fp16
        cl_khr_gl_sharing
        cl_khr_gl_depth_images
        cl_amd_device_attribute_query
        cl_amd_vec3
        cl_amd_printf
        cl_amd_media_ops
        cl_amd_media_ops2
        cl_amd_popcnt
        cl_khr_image2d_from_buffer
        cl_khr_subgroups
        cl_khr_gl_event
        cl_khr_depth_images
        cl_khr_mipmap_image
        cl_khr_mipmap_image_writes
        cl_amd_copy_buffer_p2p
    Has AMD Blas = No
    Has AMD Fft = No
    Preferred vector width char = 4
    Preferred vector width short = 2
    Preferred vector width int = 1
    Preferred vector width long = 1
    Preferred vector width float = 1
    Preferred vector width double = 1
[==========] Running 30 tests from 5 test cases.
[----------] Global test environment set-up.
[----------] 2 tests from Image_Threshold_NonMaxSuppression_FAST
[ RUN      ] Image_Threshold_NonMaxSuppression_FAST.FAST/0, where GetParam() = ("gpu/perf/aloe.png", 20, false)
[ PERFSTAT ]    (samples=13   mean=0.69   median=0.69   min=0.69   stddev=0.00 (0.6%))
[       OK ] Image_Threshold_NonMaxSuppression_FAST.FAST/0 (104 ms)
[ RUN      ] Image_Threshold_NonMaxSuppression_FAST.FAST/1, where GetParam() = ("gpu/perf/aloe.png", 20, true)
[ PERFSTAT ]    (samples=63   mean=1.74   median=1.74   min=1.72   stddev=0.05 (2.8%))
[       OK ] Image_Threshold_NonMaxSuppression_FAST.FAST/1 (158 ms)
[----------] 2 tests from Image_Threshold_NonMaxSuppression_FAST (262 ms total)

[----------] 1 test from Image_NFeatures_ORB
[ RUN      ] Image_NFeatures_ORB.ORB/0, where GetParam() = ("gpu/perf/aloe.png", 4000)
[ PERFSTAT ]    (samples=13   mean=9.15   median=9.13   min=8.94   stddev=0.17 (1.9%))
[       OK ] Image_NFeatures_ORB.ORB/0 (282 ms)
[----------] 1 test from Image_NFeatures_ORB (282 ms total)

[----------] 9 tests from DescSize_Norm_BFMatch
[ RUN      ] DescSize_Norm_BFMatch.BFMatch/0, where GetParam() = (64, NORM_L1)
[ PERFSTAT ]    (samples=100   mean=4.88   median=4.78   min=4.76   stddev=0.16 (3.4%))
[       OK ] DescSize_Norm_BFMatch.BFMatch/0 (492 ms)
[ RUN      ] DescSize_Norm_BFMatch.BFMatch/1, where GetParam() = (64, NORM_L2)
[ PERFSTAT ]    (samples=100   mean=4.87   median=4.78   min=4.77   stddev=0.16 (3.3%))
[       OK ] DescSize_Norm_BFMatch.BFMatch/1 (492 ms)
[ RUN      ] DescSize_Norm_BFMatch.BFMatch/2, where GetParam() = (64, NORM_HAMMING)
[ PERFSTAT ]    (samples=100   mean=4.93   median=4.82   min=4.80   stddev=0.17 (3.5%))
[       OK ] DescSize_Norm_BFMatch.BFMatch/2 (497 ms)
[ RUN      ] DescSize_Norm_BFMatch.BFMatch/3, where GetParam() = (128, NORM_L1)
[ PERFSTAT ]    (samples=10   mean=10.12   median=10.16   min=9.70   stddev=0.29 (2.9%))
[       OK ] DescSize_Norm_BFMatch.BFMatch/3 (104 ms)
[ RUN      ] DescSize_Norm_BFMatch.BFMatch/4, where GetParam() = (128, NORM_L2)
[ PERFSTAT ]    (samples=10   mean=10.12   median=10.19   min=9.77   stddev=0.27 (2.7%))
[       OK ] DescSize_Norm_BFMatch.BFMatch/4 (104 ms)
[ RUN      ] DescSize_Norm_BFMatch.BFMatch/5, where GetParam() = (128, NORM_HAMMING)
[ PERFSTAT ]    (samples=10   mean=10.22   median=10.32   min=9.96   stddev=0.21 (2.0%))
[       OK ] DescSize_Norm_BFMatch.BFMatch/5 (103 ms)
[ RUN      ] DescSize_Norm_BFMatch.BFMatch/6, where GetParam() = (256, NORM_L1)
[ PERFSTAT ]    (samples=10   mean=20.90   median=20.87   min=20.45   stddev=0.45 (2.1%))
[       OK ] DescSize_Norm_BFMatch.BFMatch/6 (214 ms)
[ RUN      ] DescSize_Norm_BFMatch.BFMatch/7, where GetParam() = (256, NORM_L2)
[ PERFSTAT ]    (samples=10   mean=20.88   median=20.94   min=20.46   stddev=0.31 (1.5%))
[       OK ] DescSize_Norm_BFMatch.BFMatch/7 (214 ms)
[ RUN      ] DescSize_Norm_BFMatch.BFMatch/8, where GetParam() = (256, NORM_HAMMING)
[ PERFSTAT ]    (samples=10   mean=21.20   median=21.17   min=20.70   stddev=0.41 (1.9%))
[       OK ] DescSize_Norm_BFMatch.BFMatch/8 (214 ms)
[----------] 9 tests from DescSize_Norm_BFMatch (2434 ms total)

[----------] 12 tests from DescSize_K_Norm_BFKnnMatch
[ RUN      ] DescSize_K_Norm_BFKnnMatch.BFKnnMatch/0, where GetParam() = (64, 2, NORM_L1)
[ PERFSTAT ]    (samples=100   mean=4.89   median=4.79   min=4.77   stddev=0.16 (3.4%))
[       OK ] DescSize_K_Norm_BFKnnMatch.BFKnnMatch/0 (494 ms)
[ RUN      ] DescSize_K_Norm_BFKnnMatch.BFKnnMatch/1, where GetParam() = (64, 2, NORM_L2)
[ PERFSTAT ]    (samples=100   mean=4.90   median=4.81   min=4.80   stddev=0.16 (3.2%))
[       OK ] DescSize_K_Norm_BFKnnMatch.BFKnnMatch/1 (495 ms)
[ RUN      ] DescSize_K_Norm_BFKnnMatch.BFKnnMatch/2, where GetParam() = (64, 3, NORM_L1)
[ PERFSTAT ]    (samples=10   mean=7.58   median=7.48   min=7.35   stddev=0.20 (2.6%))
[       OK ] DescSize_K_Norm_BFKnnMatch.BFKnnMatch/2 (78 ms)
[ RUN      ] DescSize_K_Norm_BFKnnMatch.BFKnnMatch/3, where GetParam() = (64, 3, NORM_L2)
[ PERFSTAT ]    (samples=25   mean=7.60   median=7.50   min=6.93   stddev=0.23 (3.0%))
[       OK ] DescSize_K_Norm_BFKnnMatch.BFKnnMatch/3 (193 ms)
[ RUN      ] DescSize_K_Norm_BFKnnMatch.BFKnnMatch/4, where GetParam() = (128, 2, NORM_L1)
[ PERFSTAT ]    (samples=10   mean=10.63   median=10.64   min=10.25   stddev=0.23 (2.2%))
[       OK ] DescSize_K_Norm_BFKnnMatch.BFKnnMatch/4 (109 ms)
[ RUN      ] DescSize_K_Norm_BFKnnMatch.BFKnnMatch/5, where GetParam() = (128, 2, NORM_L2)
[ PERFSTAT ]    (samples=11   mean=10.63   median=10.58   min=10.23   stddev=0.31 (3.0%))
[       OK ] DescSize_K_Norm_BFKnnMatch.BFKnnMatch/5 (119 ms)
[ RUN      ] DescSize_K_Norm_BFKnnMatch.BFKnnMatch/6, where GetParam() = (128, 3, NORM_L1)
[ PERFSTAT ]    (samples=10   mean=12.82   median=12.95   min=12.56   stddev=0.19 (1.5%))
[       OK ] DescSize_K_Norm_BFKnnMatch.BFKnnMatch/6 (132 ms)
[ RUN      ] DescSize_K_Norm_BFKnnMatch.BFKnnMatch/7, where GetParam() = (128, 3, NORM_L2)
[ PERFSTAT ]    (samples=10   mean=12.87   median=12.97   min=12.58   stddev=0.18 (1.4%))
[       OK ] DescSize_K_Norm_BFKnnMatch.BFKnnMatch/7 (132 ms)
[ RUN      ] DescSize_K_Norm_BFKnnMatch.BFKnnMatch/8, where GetParam() = (256, 2, NORM_L1)
[ PERFSTAT ]    (samples=10   mean=21.26   median=21.17   min=20.94   stddev=0.36 (1.7%))
[       OK ] DescSize_K_Norm_BFKnnMatch.BFKnnMatch/8 (217 ms)
[ RUN      ] DescSize_K_Norm_BFKnnMatch.BFKnnMatch/9, where GetParam() = (256, 2, NORM_L2)
[ PERFSTAT ]    (samples=10   mean=21.20   median=21.08   min=20.87   stddev=0.42 (2.0%))
[       OK ] DescSize_K_Norm_BFKnnMatch.BFKnnMatch/9 (219 ms)
[ RUN      ] DescSize_K_Norm_BFKnnMatch.BFKnnMatch/10, where GetParam() = (256, 3, NORM_L1)
[ PERFSTAT ]    (samples=10   mean=23.91   median=23.91   min=23.61   stddev=0.22 (0.9%))
[       OK ] DescSize_K_Norm_BFKnnMatch.BFKnnMatch/10 (244 ms)
[ RUN      ] DescSize_K_Norm_BFKnnMatch.BFKnnMatch/11, where GetParam() = (256, 3, NORM_L2)
[ PERFSTAT ]    (samples=10   mean=23.82   median=23.89   min=23.60   stddev=0.19 (0.8%))
[       OK ] DescSize_K_Norm_BFKnnMatch.BFKnnMatch/11 (244 ms)
[----------] 12 tests from DescSize_K_Norm_BFKnnMatch (2676 ms total)

[----------] 6 tests from DescSize_Norm_BFRadiusMatch
[ RUN      ] DescSize_Norm_BFRadiusMatch.BFRadiusMatch/0, where GetParam() = (64, NORM_L1)
[ PERFSTAT ]    (samples=100   mean=5.29   median=5.43   min=5.05   stddev=0.22 (4.2%))
[       OK ] DescSize_Norm_BFRadiusMatch.BFRadiusMatch/0 (564 ms)
[ RUN      ] DescSize_Norm_BFRadiusMatch.BFRadiusMatch/1, where GetParam() = (64, NORM_L2)
[ PERFSTAT ]    (samples=13   mean=5.51   median=5.45   min=5.42   stddev=0.12 (2.3%))
[       OK ] DescSize_Norm_BFRadiusMatch.BFRadiusMatch/1 (99 ms)
[ RUN      ] DescSize_Norm_BFRadiusMatch.BFRadiusMatch/2, where GetParam() = (128, NORM_L1)
[ PERFSTAT ]    (samples=10   mean=10.43   median=10.48   min=10.11   stddev=0.27 (2.6%))
[       OK ] DescSize_Norm_BFRadiusMatch.BFRadiusMatch/2 (133 ms)
[ RUN      ] DescSize_Norm_BFRadiusMatch.BFRadiusMatch/3, where GetParam() = (128, NORM_L2)
[ PERFSTAT ]    (samples=10   mean=10.94   median=11.08   min=10.12   stddev=0.31 (2.8%))
[       OK ] DescSize_Norm_BFRadiusMatch.BFRadiusMatch/3 (141 ms)
[ RUN      ] DescSize_Norm_BFRadiusMatch.BFRadiusMatch/4, where GetParam() = (256, NORM_L1)
[ PERFSTAT ]    (samples=10   mean=22.63   median=22.56   min=22.49   stddev=0.14 (0.6%))
[       OK ] DescSize_Norm_BFRadiusMatch.BFRadiusMatch/4 (258 ms)
[ RUN      ] DescSize_Norm_BFRadiusMatch.BFRadiusMatch/5, where GetParam() = (256, NORM_L2)
[ PERFSTAT ]    (samples=10   mean=21.06   median=21.04   min=20.83   stddev=0.24 (1.1%))
[       OK ] DescSize_Norm_BFRadiusMatch.BFRadiusMatch/5 (243 ms)
[----------] 6 tests from DescSize_Norm_BFRadiusMatch (1438 ms total)

[----------] Global test environment tear-down
[==========] 30 tests from 5 test cases ran. (7092 ms total)
[  PASSED  ] 30 tests.
